import { SmartBlock } from "smart-sources";

/**
 * @class SmartTemplateOutput
 * @extends SmartBlock
 * @classdesc Represents an individual output generated by a template request. Stores the response (including tool calls) and can perform lookups using hypotheticals.
 *
 * @example
 * const output = env.smart_template_outputs.get('template_key#block_key');
 * const results = await output.lookup();
 */
export class SmartTemplateOutput extends SmartBlock {
  /**
   * Performs a lookup operation using the hypotheticals extracted from this output.
   * Typically involves semantic search against the environment's smart sources.
   * @async
   * @param {Object} [params={}] - Additional parameters for the lookup operation.
   * @returns {Promise<Array>} The results of the semantic search.
   *
   * @example
   * const results = await output.lookup();
   */
  async lookup(params = {}) {
    const results = this.env.smart_sources.lookup({
      hypotheticals: this.hypotheticals,
    });
    return results;
  }

  /**
   * Retrieves the parent template associated with this output.
   * @name template
   * @type {SmartTemplate}
   * @readonly
   *
   * @example
   * const template = output.template;
   */
  get template() {
    return this.collection.items[this.data.template_key];
  }

  /**
   * Extracts hypothetical values from the output response.
   * Uses the template's `lookup_hypotheticals_map` to navigate the tool call arguments.
   * @name hypotheticals
   * @type {Array<string>}
   * @readonly
   *
   * @example
   * const hypotheticals = output.hypotheticals;
   * console.log(hypotheticals); // Array of hypothetical note strings
   */
  get hypotheticals() {
    const hypotheticals_map = Object.values(this.template.data.opts.lookup_hypotheticals_map)
      .map(json_path => json_path.split('.'));
    const output_args = typeof this.data.response.tool_calls[0].function.arguments === 'string'
      ? JSON.parse(this.data.response.tool_calls[0].function.arguments)
      : this.data.response.tool_calls[0].function.arguments;

    const hypotheticals = hypotheticals_map.map(json_path => {
      let value = output_args;
      for (const key of json_path) {
        value = value[key];
      }
      return value;
    });
    return hypotheticals;
  }
}